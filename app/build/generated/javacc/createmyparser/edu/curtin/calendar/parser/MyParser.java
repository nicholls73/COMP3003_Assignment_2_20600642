/* Generated By:JavaCC: Do not edit this line. MyParser.java */
package edu.curtin.calendar.parser;

import java.util.*;

import edu.curtin.calendar.lib.Event;
import edu.curtin.calendar.lib.Plugin;
import edu.curtin.calendar.lib.Script;

public class MyParser implements MyParserConstants {

  static final public void inputFile(List<Event> eventList, List<Plugin> pluginList) throws ParseException {
    Event newEvent = new Event();
    Plugin newPlugin = new Plugin();
    Token date, time, duration, title, pluginId, key, value;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVENT:
        jj_consume_token(EVENT);
                  newEvent = new Event();
        date = jj_consume_token(DATE);
                      newEvent.setDate(date.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 12:
          jj_consume_token(12);
                        newEvent.setAllDay();
          break;
        case TIME:
          time = jj_consume_token(TIME);
                          newEvent.setTime(time.image);
          duration = jj_consume_token(DURATION);
                                  newEvent.setDuration(Integer.valueOf(duration.image));
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        title = jj_consume_token(QUOTED_STRING);
                                newEvent.setTitle(title.image);
          eventList.add(newEvent);
        break;
      case PLUGIN:
        jj_consume_token(PLUGIN);
                   newPlugin = new Plugin();
        pluginId = jj_consume_token(IDENTIFIER);
                                newPlugin.setId(pluginId.image);
        jj_consume_token(13);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KEY:
          key = jj_consume_token(KEY);
          jj_consume_token(14);
          value = jj_consume_token(QUOTED_STRING);
                                                  newPlugin.addArgument(key.image, value.image);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 15:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_2;
            }
            jj_consume_token(15);
            key = jj_consume_token(KEY);
            jj_consume_token(14);
            value = jj_consume_token(QUOTED_STRING);
                                                      newPlugin.addArgument(key.image, value.image);
          }
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(16);
          pluginList.add(newPlugin);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVENT:
      case PLUGIN:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public Event inputEvent() throws ParseException {
    Event newEvent = new Event();
    Token date, time, duration, title;
    jj_consume_token(EVENT);
    date = jj_consume_token(DATE);
                  newEvent.setDate(date.image);
    time = jj_consume_token(TIME);
                  newEvent.setTime(time.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DURATION:
      duration = jj_consume_token(DURATION);
                              newEvent.setDuration(Integer.valueOf(duration.image));
      break;
    case 12:
      jj_consume_token(12);
                    newEvent.setAllDay();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    title = jj_consume_token(QUOTED_STRING);
                            newEvent.setTitle(title.image);
      {if (true) return newEvent;}
    throw new Error("Missing return statement in function");
  }

  static final public Plugin inputPlugin() throws ParseException {
    Plugin newPlugin = new Plugin();
    Token pluginId, key, value;
    jj_consume_token(PLUGIN);
    pluginId = jj_consume_token(IDENTIFIER);
                            newPlugin.setId(pluginId.image);
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEY:
      key = jj_consume_token(KEY);
      jj_consume_token(14);
      value = jj_consume_token(QUOTED_STRING);
                                              newPlugin.addArgument(key.image, value.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 15:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_3;
        }
        jj_consume_token(15);
        key = jj_consume_token(KEY);
        jj_consume_token(14);
        value = jj_consume_token(QUOTED_STRING);
                                                  newPlugin.addArgument(key.image, value.image);
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(16);
      {if (true) return newPlugin;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1080,0x8000,0x400,0x18,0x18,0x1100,0x8000,0x400,};
   }

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
